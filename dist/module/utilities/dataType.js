export function getType(a){var b=Number.isNaN;return"object"==typeof a&&Array.isArray(a)?"array":"object"!=typeof a||Array.isArray(a)||null!==a?"object"!=typeof a||Array.isArray(a)||null===a?"number"==typeof a&&b(a)?"NaN":typeof a:"object":"null"}export function getIntermediateType(a){let b=getType(a);if("number"===b)return isFloat(a)?"float":"integer";if("array"===b){if(isArrayOfString(a))return"string[]";if(isArrayOfArray(a))return"array[]";if(isArrayOfObject(a))return"object[]";if(isArrayOfNull(a))return"null[]";if(isArrayOfBoolean(a))return"boolean[]";if(isArrayOfNumber(a))return"number[]"}return b}export function isFunction(a){return"function"===getType(a)}export function isArray(a){return"array"===getType(a)}export function arrayOfDataType(a,b){if(!isArray(a))throw new Error(`parameter 1 must array, '${getType(a)}' given !`);if(!isString(b))throw new Error(`parameter 2 must string, '${getType(b)}' given !`);for(let c of a)if(getType(c)!==b)return!1;return!0}export function isArrayOfString(a){if(!isArray(a))throw new Error(`parameter 1 must array, '${getType(a)}' given !`);return arrayOfDataType(a,"string")}export function isArrayOfNumber(a){if(!isArray(a))throw new Error(`parameter 1 must array, '${getType(a)}' given !`);return arrayOfDataType(a,"number")}export function isArrayOfObject(a){if(!isArray(a))throw new Error(`parameter 1 must array, '${getType(a)}' given !`);return arrayOfDataType(a,"object")}export function isArrayOfArray(a){if(!isArray(a))throw new Error(`parameter 1 must array, '${getType(a)}' given !`);return arrayOfDataType(a,"array")}export function isArrayOfNull(a){if(!isArray(a))throw new Error(`parameter 1 must array, '${getType(a)}' given !`);return arrayOfDataType(a,"null")}export function isArrayOfBoolean(a){if(!isArray(a))throw new Error(`parameter 1 must array, '${getType(a)}' given !`);return arrayOfDataType(a,"boolean")}export function isObject(a){return"object"===getType(a)}export function isNull(a){return"null"===getType(a)}export function isUndefined(a){return"undefined"===getType(a)}export function isBoolean(a){return""===getType(a)}export function isNumber(a){return"number"===getType(a)}export function isInteger(a){return"number"===getType(a)&&0==a%1}export function isFloat(a){return"number"===getType(a)&&0<a%1}export function isString(a){return"string"===getType(a)}export function isContainTypes(a,b){if(!["string","array"].includes(getType(b)))throw`parameter 2 must be type string|array, '${getType(b)}'' given !`;let c=[];return c=isString(b)?b.split(/(\||\,|\s)/g):b,c.includes(getIntermediateType(a))}