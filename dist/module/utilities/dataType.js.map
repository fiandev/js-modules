{"version":3,"file":"dataType.js","names":["getType","any","b","Number","isNaN","Array","isArray","getIntermediateType","type","isFloat","isArrayOfString","isArrayOfArray","isArrayOfObject","isArrayOfNull","isArrayOfBoolean","isArrayOfNumber","isFunction","arrayOfDataType","array","Error","isString","item","isObject","isNull","isUndefined","isBoolean","isNumber","isInteger","isContainTypes","types","includes","dataTypes","split"],"sources":["../../../src/utilities/dataType.js"],"sourcesContent":["/**\n * @function getType\n * function to get real data type\n * @param {any} any - anyting to check the data type\n * @returns {string} data type name\n */\nexport function getType(any) {\n  if (typeof any === \"object\" && Array.isArray(any)) return \"array\";\n  if (typeof any === \"object\" && !Array.isArray(any) && any === null)\n    return \"null\";\n  if (typeof any === \"object\" && !Array.isArray(any) && any !== null)\n    return \"object\";\n  if (typeof any === \"number\" && Number.isNaN(any)) return \"NaN\";\n\n  /**\n   * if all conditions are met, return whatever value the 'typeof' function returns\n   * excepted type of data {string,number,function|undefined|boolean}\n   */\n  return typeof any;\n}\n\nexport function getIntermediateType(any) {\n  let type = getType(any);\n\n  if (type === \"number\") {\n    return isFloat(any) ? \"float\" : \"integer\";\n  }\n  if (type === \"array\") {\n    if (isArrayOfString(any)) return \"string[]\";\n    if (isArrayOfArray(any)) return \"array[]\";\n    if (isArrayOfObject(any)) return \"object[]\";\n    if (isArrayOfNull(any)) return \"null[]\";\n    if (isArrayOfBoolean(any)) return \"boolean[]\";\n    if (isArrayOfNumber(any)) return \"number[]\";\n  }\n\n  return type;\n}\n\n/**\n * @function isFunction\n * function to check the variable type is function or not\n * @param {any} any - anyting to check the data type\n * @returns {boolean}\n */\nexport function isFunction(any) {\n  return getType(any) === \"function\";\n}\n\n/**\n * @function isArray\n * function to check the variable type is array or not\n * @param {any} any - anyting to check the data type\n * @returns {boolean}\n */\nexport function isArray(any) {\n  return getType(any) === \"array\";\n}\n\n/**\n * @function arrayOfDataType\n * function to check if all items in the array is have same data type\n * @param {Array} array - the array whose item type data will be checked\n * @param {string} type - name of data type to checked\n * @returns {boolean}\n */\nexport function arrayOfDataType(array, type) {\n  if (!isArray(array))\n    throw new Error(`parameter 1 must array, '${getType(array)}' given !`);\n  if (!isString(type))\n    throw new Error(`parameter 2 must string, '${getType(type)}' given !`);\n\n  for (let item of array) {\n    if (getType(item) !== type) return false;\n  }\n\n  return true;\n}\n\n/**\n * @function isArrayOfString\n * function to check all items in array have string data type or not\n * @param {Array} array - the array whose item type data will be checked\n * @returns {boolean}\n */\nexport function isArrayOfString(array) {\n  if (!isArray(array))\n    throw new Error(`parameter 1 must array, '${getType(array)}' given !`);\n\n  return arrayOfDataType(array, \"string\");\n}\n\n/**\n * @function isArrayOfNumber\n * function to check all items in array have number data type or not\n * @param {Array} array - the array whose item type data will be checked\n * @returns {boolean}\n */\nexport function isArrayOfNumber(array) {\n  if (!isArray(array))\n    throw new Error(`parameter 1 must array, '${getType(array)}' given !`);\n\n  return arrayOfDataType(array, \"number\");\n}\n\n/**\n * @function isArrayOfObject\n * function to check all items in array have object data type or not\n * @param {Array} array - the array whose item type data will be checked\n * @returns {boolean}\n */\nexport function isArrayOfObject(array) {\n  if (!isArray(array))\n    throw new Error(`parameter 1 must array, '${getType(array)}' given !`);\n\n  return arrayOfDataType(array, \"object\");\n}\n\n/**\n * @function isArrayOfArray\n * function to check all items in array have string data type or not\n * @param {Array} array - the array whose item type data will be checked\n * @returns {boolean}\n */\nexport function isArrayOfArray(array) {\n  if (!isArray(array))\n    throw new Error(`parameter 1 must array, '${getType(array)}' given !`);\n\n  return arrayOfDataType(array, \"array\");\n}\n\n/**\n * @function isArrayOfNull\n * function to check all items in array have null data type or not\n * @param {Array} array - the array whose item type data will be checked\n * @returns {boolean}\n */\nexport function isArrayOfNull(array) {\n  if (!isArray(array))\n    throw new Error(`parameter 1 must array, '${getType(array)}' given !`);\n\n  return arrayOfDataType(array, \"null\");\n}\n\n/**\n * @function isArrayOfBoolean\n * function to check all items in array have boolean data type or not\n * @param {Array} array - the array whose item type data will be checked\n * @returns {boolean}\n */\nexport function isArrayOfBoolean(array) {\n  if (!isArray(array))\n    throw new Error(`parameter 1 must array, '${getType(array)}' given !`);\n\n  return arrayOfDataType(array, \"boolean\");\n}\n\n/**\n * @function isObject\n * function to check the variable type is object or not\n * @param {any} any - anyting to check the data type\n * @returns {boolean}\n */\nexport function isObject(any) {\n  return getType(any) === \"object\";\n}\n\n/**\n * @function isNull\n * function to check the variable type is null or not\n * @param {any} any - anyting to check the data type\n * @returns {boolean}\n */\nexport function isNull(any) {\n  return getType(any) === \"null\";\n}\n\n/**\n * @function isUndefined\n * function to check the variable type is undefined or not\n * @param {any} any - anyting to check the data type\n * @returns {boolean}\n */\nexport function isUndefined(any) {\n  return getType(any) === \"undefined\";\n}\n\n/**\n * @function isBoolean\n * function to check the variable type is boolean or not\n * @param {any} any - anyting to check the data type\n * @returns {boolean}\n */\nexport function isBoolean(any) {\n  return getType(any) === \"\";\n}\n\n/**\n * @function isNumber\n * function to check the variabel is number or not\n * @param {any} any - anyting to check the data type\n * @returns {boolean}\n */\nexport function isNumber(any) {\n  return getType(any) === \"number\";\n}\n\n/**\n * @function isInteger\n * function to check the number is integer or not\n * @param {any} any - anyting to check the data type\n * @returns {boolean}\n */\nexport function isInteger(any) {\n  return getType(any) === \"number\" && any % 1 === 0;\n}\n\n/**\n * @function isInteger\n * function to check the number is float or not\n * @param {any} any - anyting to check the data type\n * @returns {boolean}\n */\nexport function isFloat(any) {\n  return getType(any) === \"number\" && any % 1 > 0;\n}\n\n/**\n * @function isString\n * function to check the variable type is string or not\n * @param {any} any - anyting to check the data type\n * @returns {boolean}\n */\nexport function isString(any) {\n  return getType(any) === \"string\";\n}\n\nexport function isContainTypes(any, types) {\n  if (![\"string\", \"array\"].includes(getType(types)))\n    throw `parameter 2 must be type string|array, '${getType(types)}'' given !`;\n\n  let dataTypes = [];\n  let SPLITTER_REGEX = /(\\||\\,|\\s)/g;\n\n  if (isString(types)) dataTypes = types.split(SPLITTER_REGEX);\n  else dataTypes = types;\n\n  return dataTypes.includes(getIntermediateType(any));\n}\n"],"mappings":"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"}