{"version":3,"file":"dataType.js","names":["getType","any","Array","isArray","Number","isNaN","getIntermediateType","type","isFloat","isArrayOfString","isArrayOfArray","isArrayOfObject","isArrayOfNull","isArrayOfBoolean","isArrayOfNumber","isFunction","arrayOfDataType","array","Error","isString","item","isObject","isNull","isUndefined","isBoolean","isNumber","isInteger","isContainTypes","types","includes","dataTypes","SPLITTER_REGEX","split"],"sources":["../../../src/utilities/dataType.js"],"sourcesContent":["\n/**\n * @function getType\n * function to get real data type \n * @param {any} any - anyting to check the data type\n * @returns {string} data type name\n */\nexport function getType (any) {\n  if (typeof any === \"object\" && Array.isArray(any)) return \"array\";\n  if (typeof any === \"object\" && !Array.isArray(any) && any === null) return \"null\";\n  if (typeof any === \"object\" && !Array.isArray(any) && any !== null) return \"object\";\n  if (typeof any === \"number\" && Number.isNaN(any)) return \"NaN\";\n  \n  /**\n   * if all conditions are met, return whatever value the 'typeof' function returns\n   * excepted type of data {string,number,function|undefined|boolean}\n   */\n  return typeof any;\n}\n\nexport function getIntermediateType (any) {\n  let type = getType(any);\n  \n  if (type === \"number\") {\n    return isFloat(any) ? \"float\" : \"integer\";\n  }\n  if (type === \"array\") {\n    if (isArrayOfString(any)) return \"string[]\";\n    if (isArrayOfArray(any)) return \"array[]\";\n    if (isArrayOfObject(any)) return \"object[]\";\n    if (isArrayOfNull(any)) return \"null[]\";\n    if (isArrayOfBoolean(any)) return \"boolean[]\";\n    if (isArrayOfNumber(any)) return \"number[]\";\n  }\n  \n  return type;\n}\n\n/**\n * @function isFunction\n * function to check the variable type is function or not\n * @param {any} any - anyting to check the data type\n * @returns {boolean}\n */\nexport function isFunction (any) {\n  return getType(any) === \"function\";\n}\n\n/**\n * @function isArray\n * function to check the variable type is array or not\n * @param {any} any - anyting to check the data type\n * @returns {boolean}\n */\nexport function isArray (any) {\n  return getType(any) === \"array\";\n}\n\n/**\n * @function arrayOfDataType\n * function to check if all items in the array is have same data type\n * @param {Array} array - the array whose item type data will be checked\n * @param {string} type - name of data type to checked\n * @returns {boolean}\n */\nexport function arrayOfDataType (array, type) {\n  if (!isArray(array)) throw new Error(`parameter 1 must array, '${ getType(array) }' given !`);\n  if (!isString(type)) throw new Error(`parameter 2 must string, '${ getType(type) }' given !`);\n  \n  for (let item of array) {\n    if (getType(item) !== type) return false;\n  }\n  \n  return true;\n}\n\n/**\n * @function isArrayOfString\n * function to check all items in array have string data type or not\n * @param {Array} array - the array whose item type data will be checked\n * @returns {boolean}\n */\nexport function isArrayOfString (array) {\n  if (!isArray(array)) throw new Error(`parameter 1 must array, '${ getType(array) }' given !`);\n  \n  return arrayOfDataType(array, \"string\");\n}\n\n/**\n * @function isArrayOfNumber\n * function to check all items in array have number data type or not\n * @param {Array} array - the array whose item type data will be checked\n * @returns {boolean}\n */\nexport function isArrayOfNumber (array) {\n  if (!isArray(array)) throw new Error(`parameter 1 must array, '${ getType(array) }' given !`);\n  \n  return arrayOfDataType(array, \"number\");\n}\n\n/**\n * @function isArrayOfObject\n * function to check all items in array have object data type or not\n * @param {Array} array - the array whose item type data will be checked\n * @returns {boolean}\n */\nexport function isArrayOfObject (array) {\n  if (!isArray(array)) throw new Error(`parameter 1 must array, '${ getType(array) }' given !`);\n  \n  return arrayOfDataType(array, \"object\");\n}\n\n/**\n * @function isArrayOfArray\n * function to check all items in array have string data type or not\n * @param {Array} array - the array whose item type data will be checked\n * @returns {boolean}\n */\nexport function isArrayOfArray (array) {\n  if (!isArray(array)) throw new Error(`parameter 1 must array, '${ getType(array) }' given !`);\n  \n  return arrayOfDataType(array, \"array\");\n}\n\n/**\n * @function isArrayOfNull\n * function to check all items in array have null data type or not\n * @param {Array} array - the array whose item type data will be checked\n * @returns {boolean}\n */\nexport function isArrayOfNull (array) {\n  if (!isArray(array)) throw new Error(`parameter 1 must array, '${ getType(array) }' given !`);\n  \n  return arrayOfDataType(array, \"null\");\n}\n\n/**\n * @function isArrayOfBoolean\n * function to check all items in array have boolean data type or not\n * @param {Array} array - the array whose item type data will be checked\n * @returns {boolean}\n */\nexport function isArrayOfBoolean (array) {\n  if (!isArray(array)) throw new Error(`parameter 1 must array, '${ getType(array) }' given !`);\n  \n  return arrayOfDataType(array, \"boolean\");\n}\n\n/**\n * @function isObject\n * function to check the variable type is object or not\n * @param {any} any - anyting to check the data type\n * @returns {boolean}\n */\nexport function isObject (any) {\n  return getType(any) === \"object\";\n}\n\n/**\n * @function isNull\n * function to check the variable type is null or not\n * @param {any} any - anyting to check the data type\n * @returns {boolean}\n */\nexport function isNull (any) {\n  return getType(any) === \"null\";\n}\n\n/**\n * @function isUndefined\n * function to check the variable type is undefined or not\n * @param {any} any - anyting to check the data type\n * @returns {boolean}\n */\nexport function isUndefined (any) {\n  return getType(any) === \"undefined\";\n}\n\n/**\n * @function isBoolean\n * function to check the variable type is boolean or not\n * @param {any} any - anyting to check the data type\n * @returns {boolean}\n */\nexport function isBoolean (any) {\n  return getType(any) === \"\";\n}\n\n/**\n * @function isNumber\n * function to check the variabel is number or not\n * @param {any} any - anyting to check the data type\n * @returns {boolean}\n */\nexport function isNumber(any) {\n  return getType(any) === \"number\";\n}\n\n/**\n * @function isInteger\n * function to check the number is integer or not\n * @param {any} any - anyting to check the data type\n * @returns {boolean}\n */\nexport function isInteger (any) {\n  return getType(any) === \"number\" && any % 1 === 0;\n}\n\n/**\n * @function isInteger\n * function to check the number is float or not\n * @param {any} any - anyting to check the data type\n * @returns {boolean}\n */\nexport function isFloat (any) {\n  return getType(any) === \"number\" && any % 1 > 0;\n}\n\n/**\n * @function isString\n * function to check the variable type is string or not\n * @param {any} any - anyting to check the data type\n * @returns {boolean}\n */\nexport function isString (any) {\n  return getType(any) === \"string\";\n}\n\nexport function isContainTypes (any, types) {\n  if (![\"string\", \"array\"].includes(getType(types))) throw `parameter 2 must be type string|array, '${ getType(types) }'' given !`;\n  \n  let dataTypes = [];\n  let SPLITTER_REGEX = /(\\||\\,|\\s)/g;\n  \n  if (isString(types)) dataTypes = types.split(SPLITTER_REGEX);\n  else dataTypes = types;\n  \n  return dataTypes.includes(getIntermediateType(any));\n}"],"mappings":"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"}