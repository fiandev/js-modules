{"version":3,"file":"random.js","names":["alphabets","arrayToString","arrayNumbers","getType","isArray","isNumber","typeErrorException","randomize","items","Math","floor","random","length","randomInteger","min","max","Number","MAX_SAFE_INTEGER","maxValueException","randomString","len","result","_alphabets","_numbers","characters","stringToArray","i"],"sources":["../../../src/utilities/random.js"],"sourcesContent":["import { alphabets } from \"./string.js\";\nimport { arrayToString } from \"./array.js\";\nimport { arrayNumbers } from \"./number.js\";\nimport { getType, isArray, isNumber } from \"./dataType.js\";\nimport { typeErrorException } from \"./exceptions.js\";\n\n/**\n * @function randomize\n * function to randomize item in the array\n * @param {Array} items - items to randomize\n * @returns {any} random item on items\n */\nexport function randomize (items) {\n  if (!isArray(items)) throw typeErrorException(items, \"array\");\n  \n  return items[Math.floor(Math.random() * items.length)];\n}\n\n/**\n * @function randomInteger\n * function to get random integer between min - max value\n * @param {number} min - minimal range of value to be randomize\n * @param {number} max - maximal range of value to be randomize\n * @returns {number} a integer that has been randomize by rules of range\n */\nexport function randomInteger (min = 0, max = 1) {\n  if (!isNumber(min)) throw typeErrorException(min, \"number\");\n  if (!isNumber(max)) throw typeErrorException(max, \"number\");\n  if (max > Number.MAX_SAFE_INTEGER) throw maxValueException(max);\n  \n  return Math.floor(Math.random() * max) + min;\n}\n\n/**\n * @function randomString\n * function to get random string with spesific length of string\n * @param {number} len - length of string to be generate\n * @param {string} character - string format to randomize\n * @returns {string} string that has been randomize\n */\nexport function randomString (len = 1) {\n  if (getType(len) !== \"number\") throw typeErrorException(items, \"number\");\n  \n  let result = \"\";\n  let _alphabets = alphabets();\n  let _numbers = arrayToString(arrayNumbers(0, 9), \"\");\n  let characters = stringToArray(_alphabets + _numbers, \"\");\n  \n  for (let i = 0; i < 1; i++) {\n    result += randomize(characters);\n  }\n  \n  return result;\n}"],"mappings":"AAAA,SAASA,SAAS,QAAQ,aAAa;AACvC,SAASC,aAAa,QAAQ,YAAY;AAC1C,SAASC,YAAY,QAAQ,aAAa;AAC1C,SAASC,OAAO,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,eAAe;AAC1D,SAASC,kBAAkB,QAAQ,iBAAiB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAAEC,KAAK,EAAE;EAChC,IAAI,CAACJ,OAAO,CAACI,KAAK,CAAC,EAAE,MAAMF,kBAAkB,CAACE,KAAK,EAAE,OAAO,CAAC;EAE7D,OAAOA,KAAK,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGH,KAAK,CAACI,MAAM,CAAC,CAAC;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAAEC,GAAG,GAAG,CAAC,EAAEC,GAAG,GAAG,CAAC,EAAE;EAC/C,IAAI,CAACV,QAAQ,CAACS,GAAG,CAAC,EAAE,MAAMR,kBAAkB,CAACQ,GAAG,EAAE,QAAQ,CAAC;EAC3D,IAAI,CAACT,QAAQ,CAACU,GAAG,CAAC,EAAE,MAAMT,kBAAkB,CAACS,GAAG,EAAE,QAAQ,CAAC;EAC3D,IAAIA,GAAG,GAAGC,MAAM,CAACC,gBAAgB,EAAE,MAAMC,iBAAiB,CAACH,GAAG,CAAC;EAE/D,OAAON,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGI,GAAG,CAAC,GAAGD,GAAG;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,YAAYA,CAAEC,GAAG,GAAG,CAAC,EAAE;EACrC,IAAIjB,OAAO,CAACiB,GAAG,CAAC,KAAK,QAAQ,EAAE,MAAMd,kBAAkB,CAACE,KAAK,EAAE,QAAQ,CAAC;EAExE,IAAIa,MAAM,GAAG,EAAE;EACf,IAAIC,UAAU,GAAGtB,SAAS,CAAC,CAAC;EAC5B,IAAIuB,QAAQ,GAAGtB,aAAa,CAACC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;EACpD,IAAIsB,UAAU,GAAGC,aAAa,CAACH,UAAU,GAAGC,QAAQ,EAAE,EAAE,CAAC;EAEzD,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1BL,MAAM,IAAId,SAAS,CAACiB,UAAU,CAAC;EACjC;EAEA,OAAOH,MAAM;AACf"}