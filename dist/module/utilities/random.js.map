{"version":3,"file":"random.js","names":["alphabets","arrayToString","arrayNumbers","getType","isArray","isNumber","typeErrorException","randomize","items","Math","floor","random","length","randomInteger","min","max","c","Number","MAX_SAFE_INTEGER","maxValueException","randomString","len","result","_alphabets","_numbers","characters","stringToArray","i"],"sources":["../../../src/utilities/random.js"],"sourcesContent":["import { alphabets } from \"./string.js\";\nimport { arrayToString } from \"./array.js\";\nimport { arrayNumbers } from \"./number.js\";\nimport { getType, isArray, isNumber } from \"./dataType.js\";\nimport { typeErrorException } from \"./exceptions.js\";\n\n/**\n * @function randomize\n * function to randomize item in the array\n * @param {Array} items - items to randomize\n * @returns {any} random item on items\n */\nexport function randomize(items) {\n  if (!isArray(items)) throw typeErrorException(items, \"array\");\n\n  return items[Math.floor(Math.random() * items.length)];\n}\n\n/**\n * @function randomInteger\n * function to get random integer between min - max value\n * @param {number} min - minimal range of value to be randomize\n * @param {number} max - maximal range of value to be randomize\n * @returns {number} a integer that has been randomize by rules of range\n */\nexport function randomInteger(min = 0, max = 1) {\n  if (!isNumber(min)) throw typeErrorException(min, \"number\");\n  if (!isNumber(max)) throw typeErrorException(max, \"number\");\n  if (max > Number.MAX_SAFE_INTEGER) throw maxValueException(max);\n\n  return Math.floor(Math.random() * max) + min;\n}\n\n/**\n * @function randomString\n * function to get random string with spesific length of string\n * @param {number} len - length of string to be generate\n * @param {string} character - string format to randomize\n * @returns {string} string that has been randomize\n */\nexport function randomString(len = 1) {\n  if (getType(len) !== \"number\") throw typeErrorException(items, \"number\");\n\n  let result = \"\";\n  let _alphabets = alphabets();\n  let _numbers = arrayToString(arrayNumbers(0, 9), \"\");\n  let characters = stringToArray(_alphabets + _numbers, \"\");\n\n  for (let i = 0; i < 1; i++) {\n    result += randomize(characters);\n  }\n\n  return result;\n}\n"],"mappings":"AAAA,OAASA,SAAS,KAAQ,aAAa,CACvC,OAASC,aAAa,KAAQ,YAAY,CAC1C,OAASC,YAAY,KAAQ,aAAa,CAC1C,OAASC,OAAO,CAAEC,OAAO,CAAEC,QAAQ,KAAQ,eAAe,CAC1D,OAASC,kBAAkB,KAAQ,iBAAiB,CAQpD,MAAO,SAAS,CAAAC,SAASA,CAACC,CAAK,CAAE,CAC/B,GAAI,CAACJ,OAAO,CAACI,CAAK,CAAC,CAAE,KAAM,CAAAF,kBAAkB,CAACE,CAAK,CAAE,OAAO,CAAC,CAE7D,MAAO,CAAAA,CAAK,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGH,CAAK,CAACI,MAAM,CAAC,CACvD,CASA,MAAO,SAAS,CAAAC,aAAaA,CAACC,CAAG,CAAG,CAAC,CAAEC,CAAG,CAAG,CAAC,CAAE,KAAAC,CAAA,CAGpCC,MAAM,CAACC,gBAAgB,CAFjC,GAAI,CAACb,QAAQ,CAACS,CAAG,CAAC,CAAE,KAAM,CAAAR,kBAAkB,CAACQ,CAAG,CAAE,QAAQ,CAAC,CAC3D,GAAI,CAACT,QAAQ,CAACU,CAAG,CAAC,CAAE,KAAM,CAAAT,kBAAkB,CAACS,CAAG,CAAE,QAAQ,CAAC,CAC3D,GAAIA,CAAG,CAAAC,CAA0B,CAAE,KAAM,CAAAG,iBAAiB,CAACJ,CAAG,CAAC,CAE/D,MAAO,CAAAN,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGI,CAAG,CAAC,CAAGD,CAC3C,CASA,MAAO,SAAS,CAAAM,YAAYA,CAACC,CAAG,CAAG,CAAC,CAAE,CACpC,GAAqB,QAAQ,GAAzBlB,OAAO,CAACkB,CAAG,CAAc,CAAE,KAAM,CAAAf,kBAAkB,CAACE,KAAK,CAAE,QAAQ,CAAC,CAAC,GAErE,CAAAc,CAAM,CAAG,EAAE,CACXC,CAAU,CAAGvB,SAAS,CAAC,CAAC,CACxBwB,CAAQ,CAAGvB,aAAa,CAACC,YAAY,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,EAAE,CAAC,CAChDuB,CAAU,CAAGC,aAAa,CAACH,CAAU,CAAGC,CAAQ,CAAE,EAAE,CAAC,CAEzD,IAAK,GAAI,CAAAG,CAAC,CAAG,CAAC,CAAM,CAAC,CAALA,CAAK,CAAEA,CAAC,EAAE,CACxBL,CAAM,EAAIf,SAAS,CAACkB,CAAU,CAAC,CAGjC,MAAO,CAAAH,CACT"}