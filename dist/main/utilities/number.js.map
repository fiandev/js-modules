{"version":3,"file":"number.js","names":["_dataType","require","_exceptions","arrayNumbers","start","end","getType","typeErrorException","invalidValueException","concat","LIMIT","Number","end_SAFE_INTEGER","integers","maxValueException","value","push"],"sources":["../../../src/utilities/number.js"],"sourcesContent":["import { getType } from \"./dataType.js\";\nimport { typeErrorException, invalidValueException, maxValueException } from \"./exceptions.js\";\n\n/**\n * @function arrayNumbers\n * function to randomize item in the array\n * @param {number} start - the start number of iteration\n * @param {nunber} end - the end number of iteration\n * @returns {any} random item on items\n */\nexport function arrayNumbers (start, end) {\n  if (getType(start) !== \"number\") throw typeErrorException(start, \"number\");\n  if (getType(end) !== \"number\") throw typeErrorException(end, \"number\");\n  if (end < start) throw invalidValueException(`${ end } < ${ start }`);\n  \n  const LIMIT = end > Number.end_SAFE_INTEGER ? Number.end_SAFE_INTEGER : end;\n  let integers = [];\n  \n  if (end > LIMIT) throw maxValueException(end, LIMIT);\n  \n  for (let value = start; value < end; value++) {\n    integers.push(value);\n  }\n  \n  return integers;\n}"],"mappings":";;;;;;AAAA,IAAAA,SAAA,GAAAC,OAAA;AACA,IAAAC,WAAA,GAAAD,OAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,YAAYA,CAAEC,KAAK,EAAEC,GAAG,EAAE;EACxC,IAAI,IAAAC,iBAAO,EAACF,KAAK,CAAC,KAAK,QAAQ,EAAE,MAAM,IAAAG,8BAAkB,EAACH,KAAK,EAAE,QAAQ,CAAC;EAC1E,IAAI,IAAAE,iBAAO,EAACD,GAAG,CAAC,KAAK,QAAQ,EAAE,MAAM,IAAAE,8BAAkB,EAACF,GAAG,EAAE,QAAQ,CAAC;EACtE,IAAIA,GAAG,GAAGD,KAAK,EAAE,MAAM,IAAAI,iCAAqB,KAAAC,MAAA,CAAKJ,GAAG,SAAAI,MAAA,CAAQL,KAAK,CAAG,CAAC;EAErE,IAAMM,KAAK,GAAGL,GAAG,GAAGM,MAAM,CAACC,gBAAgB,GAAGD,MAAM,CAACC,gBAAgB,GAAGP,GAAG;EAC3E,IAAIQ,QAAQ,GAAG,EAAE;EAEjB,IAAIR,GAAG,GAAGK,KAAK,EAAE,MAAM,IAAAI,6BAAiB,EAACT,GAAG,EAAEK,KAAK,CAAC;EAEpD,KAAK,IAAIK,KAAK,GAAGX,KAAK,EAAEW,KAAK,GAAGV,GAAG,EAAEU,KAAK,EAAE,EAAE;IAC5CF,QAAQ,CAACG,IAAI,CAACD,KAAK,CAAC;EACtB;EAEA,OAAOF,QAAQ;AACjB"}