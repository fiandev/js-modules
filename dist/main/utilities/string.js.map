{"version":3,"file":"string.js","names":["clearNecessarySpaceOnBacktick","str","getType","Error","concat","b","lines","split","result","e","_createForOfIteratorHelper","s","n","done","line","value","trimStart","a","f","alphabets","String","fromCharCode","except","typeErrorException","exceptions","character","i","includes"],"sources":["../../../src/utilities/string.js"],"sourcesContent":["import { getType } from \"./dataType.js\";\nimport { typeErrorException } from \"./exceptions.js\";\n\n/**\n * @function clearNecessarySpaceOnBacktick\n * function to clear necessary space on multiline backtick string\n * @param {string} str - string to clear their space\n * @returns {string} clear string after trimed\n */\nexport function clearNecessarySpaceOnBacktick(str) {\n  if (getType(str) !== \"string\")\n    throw new Error(\n      `parameter str must be typeof string, ${getType(str)} given`,\n    );\n\n  let lines = str.split(\"\\n\");\n  let result = \"\";\n\n  for (let line of lines) {\n    result += `${line.trimStart()}\\n`;\n  }\n  return result;\n}\n\n/**\n * @function alphabets\n * function to generate alphabets\n * @param {Object} options - options to customize returned alphabets\n * @param {(string|string[])} options.except - exception characters\n * @returns {string} string of alphabets\n */\nexport function alphabets({ except }) {\n  if (getType(except) !== \"string\" || getType(except) !== \"array\")\n    throw typeErrorException(except, \"string | array\");\n\n  let result = \"\";\n  let exceptions = [];\n\n  if (getType(except) === \"string\") exceptions = except.split(\"\");\n  else exceptions = except;\n\n  for (let i = \"a\".charCodeAt(0); i <= \"z\".charCodeAt(0); i++) {\n    let character = String.fromCharCode(i);\n\n    if (!exceptions.includes(character)) result += character;\n  }\n\n  return result;\n}\n"],"mappings":"y4CASO,QAAS,CAAAA,6BAA6BA,CAACC,CAAG,CAAE,CACjD,GAAqB,QAAQ,GAAzB,GAAAC,iBAAO,EAACD,CAAG,CAAc,CAC3B,KAAM,IAAI,CAAAE,KAAK,yCAAAC,MAAA,CAC2B,GAAAF,iBAAO,EAACD,CAAG,CAAC,UACtD,CAAC,CAAC,IAAAI,CAAA,CAEAC,CAAK,CAAGL,CAAG,CAACM,KAAK,CAAC,IAAI,CAAC,CACvBC,CAAM,CAAG,EAAE,CAAAC,CAAA,CAAAC,0BAAA,CAEEJ,CAAK,MAAtB,IAAAG,CAAA,CAAAE,CAAA,KAAAN,CAAA,CAAAI,CAAA,CAAAG,CAAA,IAAAC,IAAA,EAAwB,IAAf,CAAAC,CAAI,CAAAT,CAAA,CAAAU,KAAA,CACXP,CAAM,KAAAJ,MAAA,CAAOU,CAAI,CAACE,SAAS,CAAC,CAAC,MAC/B,CAAC,OAAAC,CAAA,EAAAR,CAAA,CAAAA,CAAA,CAAAQ,CAAA,UAAAR,CAAA,CAAAS,CAAA,GACD,MAAO,CAAAV,CACT,CASO,QAAS,CAAAW,SAASA,CAAAF,CAAA,CAAa,KAAAZ,CAAA,CAWlBe,MAAM,CAACC,YAAY,CAXXC,CAAM,CAAAL,CAAA,CAANK,MAAM,CAChC,GAAwB,QAAQ,GAA5B,GAAApB,iBAAO,EAACoB,CAAM,CAAc,EAAwB,OAAO,GAA3B,GAAApB,iBAAO,EAACoB,CAAM,CAAa,CAC7D,KAAM,GAAAC,8BAAkB,EAACD,CAAM,CAAE,gBAAgB,CAAC,CAAC,GAEjD,CAAAd,CAAM,CAAG,EAAE,CACXgB,CAAU,CAAG,EAAE,CAEeA,CAAU,CAApB,QAAQ,GAA5B,GAAAtB,iBAAO,EAACoB,CAAM,CAAc,CAAeA,CAAM,CAACf,KAAK,CAAC,EAAE,CAAC,CAC7Ce,CAAM,CAExB,IAAK,GACC,CAAAG,CAAS,CADNC,CAAC,GAAoB,CAAEA,CAAC,KAAqB,CAAEA,CAAC,EAAE,CACrDD,CAAS,CAAGpB,CAAA,CAAoBqB,CAAC,CAAC,CAEjCF,CAAU,CAACG,QAAQ,CAACF,CAAS,CAAC,GAAEjB,CAAM,EAAIiB,CAAS,EAG1D,MAAO,CAAAjB,CACT"}