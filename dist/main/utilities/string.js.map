{"version":3,"file":"string.js","names":["_dataType","require","_exceptions","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","clearNecessarySpaceOnBacktick","str","getType","Error","concat","lines","split","result","_iterator","_step","line","trimStart","alphabets","_ref","except","typeErrorException","exceptions","charCodeAt","character","String","fromCharCode","includes"],"sources":["../../../src/utilities/string.js"],"sourcesContent":["import { getType } from \"./dataType.js\";\nimport { typeErrorException } from \"./exceptions.js\";\n\n/**\n * @function clearNecessarySpaceOnBacktick\n * function to clear necessary space on multiline backtick string\n * @param {string} str - string to clear their space\n * @returns {string} clear string after trimed\n */\nexport function clearNecessarySpaceOnBacktick (str) {\n  if (getType(str) !== \"string\") throw new Error (`parameter str must be typeof string, ${ getType(str) } given`);\n  \n  let lines = str.split(\"\\n\");\n  let result = \"\";\n  \n  for (let line of lines) {\n    result += `${ line.trimStart() }\\n`;\n  }\n  return result;\n}\n\n/**\n * @function alphabets\n * function to generate alphabets\n * @param {Object} options - options to customize returned alphabets\n * @param {(string|string[])} options.except - exception characters\n * @returns {string} string of alphabets\n */\nexport function alphabets ({ except }) {\n  if (getType(except) !== \"string\" || getType(except) !== \"array\") throw typeErrorException(except, \"string | array\");\n  \n  let result = \"\";\n  let exceptions = [];\n  \n  if (getType(except) === \"string\") exceptions = except.split(\"\");\n  else exceptions = except;\n  \n  for (let i = 'a'.charCodeAt(0); i <= 'z'.charCodeAt(0); i++) {\n    let character = String.fromCharCode(i);\n    \n    if (!exceptions.includes(character)) result += character;\n  }\n  \n  return result;\n}\n\n"],"mappings":"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"}