{"version":3,"file":"array.js","names":["_dataType","require","_exceptions","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","stringToArray","str","splitter","arguments","undefined","getType","typeErrorException","split","arrayToString","except","replace","inArray","needle","haystack","isUndefined","countArrayDimention","array","counter","_iterator","_step","item","splitArray","numberOfParts","isInteger","partLength","Math","ceil","resultParts","start","end","push"],"sources":["../../../src/utilities/array.js"],"sourcesContent":["import { getType, isUndefined, isArray } from \"./dataType.js\"; \nimport { typeErrorException, invalidValueException } from \"./exceptions.js\";\n\n/**\n * @function stringToArray\n * function to split string to array\n * @param {string} str - string to split\n * @param {string} [splitter=] splitter - character to split the string to array\n * @returns {any} random item on items\n */\nexport function stringToArray (str, splitter = \"\") {\n  if (getType(str) !== \"string\") throw typeErrorException(arr, \"string\");\n  if (getType(splitter) !== \"string\") throw typeErrorException(arr, \"string\");\n  return str.split(splitter);\n}\n\n/**\n * @function arrayToString\n * function to transform array to string\n * @param {Array} arr - array to transform\n * @returns {string} string of result\n */\nexport function arrayToString (arr) {\n  if (getType(except) !== \"array\") throw typeErrorException(arr, \"array\");\n  \n  return arr.toString().replace(/\\,/g, \"\");\n}\n\n/**\n * @function inArray\n * function to check item is contained in the array\n * @param {any} needle - anything to be contained in the array\n * @param {Array} haystack - the array with included items\n * @returns {boolean}\n */\nexport function inArray(needle, haystack) {\n  if ((!isUndefined(needle) && isUndefined(haystack)) || (!isUndefined(haystack) && !isArray(haystack))) throw typeErrorException(haystack, \"array\");\n  \n  for(let i = 0; i < haystack.length; i++) {\n    if(haystack[i] === needle) return true;\n  }\n  \n  return false;\n}\n\n/**\n * @function countArrayDimention\n * function to check dimension of the array\n * @param {Array} array - the array whose dimension will be counted\n * @returns {number} total dimension of the array\n */\nexport function countArrayDimention (array) {\n  if (!isArray(array)) throw typeErrorException(array, \"array\");\n  \n  let counter = array.length;\n  \n  for (let item of array) {\n    counter += isArray(item) ? countArrayDimention(item) : 0;\n  }\n  \n  return counter;\n}\n\n/**\n * @function splitArray\n * function to split an array into several parts\n * @param {Array} array - atray whole will be splitted\n * @param {number} numberOfParts - number of parts\n * @returns {Array} splitted array\n */\nexport function splitArray(array, numberOfParts = 1) {\n  if (!isArray(array)) throw typeErrorException(array, \"array\");\n  if (!isInteger(numberOfParts)) throw typeErrorException(numberOfParts, \"number|integer\");\n  if (numberOfParts <= 0) throw `the numberOfParts must be greater than 0`;\n  \n  const partLength = Math.ceil(array.length / numberOfParts);\n  const resultParts = [];\n  \n  for (let i = 0; i < numberOfParts; i++) {\n    const start = i * partLength;\n    const end = (i + 1) * partLength;\n    resultParts.push(array.slice(start, end));\n  }\n\n  return resultParts;\n}"],"mappings":"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"}