{"version":3,"file":"array.js","names":["stringToArray","str","splitter","arguments","length","getType","typeErrorException","arr","split","arrayToString","except","toString","replace","inArray","needle","haystack","isUndefined","isArray","i","countArrayDimention","array","b","counter","d","_createForOfIteratorHelper","s","n","done","item","value","a","e","f","splitArray","numberOfParts","isInteger","partLength","Math","ceil","resultParts","start","end","push","slice"],"sources":["../../../src/utilities/array.js"],"sourcesContent":["import { getType, isUndefined, isArray } from \"./dataType.js\";\nimport { typeErrorException, invalidValueException } from \"./exceptions.js\";\n\n/**\n * @function stringToArray\n * function to split string to array\n * @param {string} str - string to split\n * @param {string} [splitter=] splitter - character to split the string to array\n * @returns {any} random item on items\n */\nexport function stringToArray(str, splitter = \"\") {\n  if (getType(str) !== \"string\") throw typeErrorException(arr, \"string\");\n  if (getType(splitter) !== \"string\") throw typeErrorException(arr, \"string\");\n  return str.split(splitter);\n}\n\n/**\n * @function arrayToString\n * function to transform array to string\n * @param {Array} arr - array to transform\n * @returns {string} string of result\n */\nexport function arrayToString(arr) {\n  if (getType(except) !== \"array\") throw typeErrorException(arr, \"array\");\n\n  return arr.toString().replace(/\\,/g, \"\");\n}\n\n/**\n * @function inArray\n * function to check item is contained in the array\n * @param {any} needle - anything to be contained in the array\n * @param {Array} haystack - the array with included items\n * @returns {boolean}\n */\nexport function inArray(needle, haystack) {\n  if (\n    (!isUndefined(needle) && isUndefined(haystack)) ||\n    (!isUndefined(haystack) && !isArray(haystack))\n  )\n    throw typeErrorException(haystack, \"array\");\n\n  for (let i = 0; i < haystack.length; i++) {\n    if (haystack[i] === needle) return true;\n  }\n\n  return false;\n}\n\n/**\n * @function countArrayDimention\n * function to check dimension of the array\n * @param {Array} array - the array whose dimension will be counted\n * @returns {number} total dimension of the array\n */\nexport function countArrayDimention(array) {\n  if (!isArray(array)) throw typeErrorException(array, \"array\");\n\n  let counter = array.length;\n\n  for (let item of array) {\n    counter += isArray(item) ? countArrayDimention(item) : 0;\n  }\n\n  return counter;\n}\n\n/**\n * @function splitArray\n * function to split an array into several parts\n * @param {Array} array - atray whole will be splitted\n * @param {number} numberOfParts - number of parts\n * @returns {Array} splitted array\n */\nexport function splitArray(array, numberOfParts = 1) {\n  if (!isArray(array)) throw typeErrorException(array, \"array\");\n  if (!isInteger(numberOfParts))\n    throw typeErrorException(numberOfParts, \"number|integer\");\n  if (numberOfParts <= 0) throw `the numberOfParts must be greater than 0`;\n\n  const partLength = Math.ceil(array.length / numberOfParts);\n  const resultParts = [];\n\n  for (let i = 0; i < numberOfParts; i++) {\n    const start = i * partLength;\n    const end = (i + 1) * partLength;\n    resultParts.push(array.slice(start, end));\n  }\n\n  return resultParts;\n}\n"],"mappings":"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"}