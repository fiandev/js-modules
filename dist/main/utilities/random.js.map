{"version":3,"file":"random.js","names":["_string","require","_array","_number","_dataType","_exceptions","randomize","items","isArray","typeErrorException","Math","floor","random","length","randomInteger","min","arguments","undefined","max","isNumber","Number","MAX_SAFE_INTEGER","maxValueException","randomString","len","getType","result","_alphabets","alphabets","_numbers","arrayToString","arrayNumbers","characters","stringToArray","i"],"sources":["../../../src/utilities/random.js"],"sourcesContent":["import { alphabets } from \"./string.js\";\nimport { arrayToString } from \"./array.js\";\nimport { arrayNumbers } from \"./number.js\";\nimport { getType, isArray, isNumber } from \"./dataType.js\";\nimport { typeErrorException } from \"./exceptions.js\";\n\n/**\n * @function randomize\n * function to randomize item in the array\n * @param {Array} items - items to randomize\n * @returns {any} random item on items\n */\nexport function randomize (items) {\n  if (!isArray(items)) throw typeErrorException(items, \"array\");\n  \n  return items[Math.floor(Math.random() * items.length)];\n}\n\n/**\n * @function randomInteger\n * function to get random integer between min - max value\n * @param {number} min - minimal range of value to be randomize\n * @param {number} max - maximal range of value to be randomize\n * @returns {number} a integer that has been randomize by rules of range\n */\nexport function randomInteger (min = 0, max = 1) {\n  if (!isNumber(min)) throw typeErrorException(min, \"number\");\n  if (!isNumber(max)) throw typeErrorException(max, \"number\");\n  if (max > Number.MAX_SAFE_INTEGER) throw maxValueException(max);\n  \n  return Math.floor(Math.random() * max) + min;\n}\n\n/**\n * @function randomString\n * function to get random string with spesific length of string\n * @param {number} len - length of string to be generate\n * @param {string} character - string format to randomize\n * @returns {string} string that has been randomize\n */\nexport function randomString (len = 1) {\n  if (getType(len) !== \"number\") throw typeErrorException(items, \"number\");\n  \n  let result = \"\";\n  let _alphabets = alphabets();\n  let _numbers = arrayToString(arrayNumbers(0, 9), \"\");\n  let characters = stringToArray(_alphabets + _numbers, \"\");\n  \n  for (let i = 0; i < 1; i++) {\n    result += randomize(characters);\n  }\n  \n  return result;\n}"],"mappings":";;;;;;;;AAAA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AACA,IAAAE,OAAA,GAAAF,OAAA;AACA,IAAAG,SAAA,GAAAH,OAAA;AACA,IAAAI,WAAA,GAAAJ,OAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASK,SAASA,CAAEC,KAAK,EAAE;EAChC,IAAI,CAAC,IAAAC,iBAAO,EAACD,KAAK,CAAC,EAAE,MAAM,IAAAE,8BAAkB,EAACF,KAAK,EAAE,OAAO,CAAC;EAE7D,OAAOA,KAAK,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,KAAK,CAACM,MAAM,CAAC,CAAC;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,aAAaA,CAAA,EAAoB;EAAA,IAAlBC,GAAG,GAAAC,SAAA,CAAAH,MAAA,QAAAG,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;EAAA,IAAEE,GAAG,GAAAF,SAAA,CAAAH,MAAA,QAAAG,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;EAC7C,IAAI,CAAC,IAAAG,kBAAQ,EAACJ,GAAG,CAAC,EAAE,MAAM,IAAAN,8BAAkB,EAACM,GAAG,EAAE,QAAQ,CAAC;EAC3D,IAAI,CAAC,IAAAI,kBAAQ,EAACD,GAAG,CAAC,EAAE,MAAM,IAAAT,8BAAkB,EAACS,GAAG,EAAE,QAAQ,CAAC;EAC3D,IAAIA,GAAG,GAAGE,MAAM,CAACC,gBAAgB,EAAE,MAAMC,iBAAiB,CAACJ,GAAG,CAAC;EAE/D,OAAOR,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGM,GAAG,CAAC,GAAGH,GAAG;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASQ,YAAYA,CAAA,EAAW;EAAA,IAATC,GAAG,GAAAR,SAAA,CAAAH,MAAA,QAAAG,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,CAAC;EACnC,IAAI,IAAAS,iBAAO,EAACD,GAAG,CAAC,KAAK,QAAQ,EAAE,MAAM,IAAAf,8BAAkB,EAACF,KAAK,EAAE,QAAQ,CAAC;EAExE,IAAImB,MAAM,GAAG,EAAE;EACf,IAAIC,UAAU,GAAG,IAAAC,iBAAS,EAAC,CAAC;EAC5B,IAAIC,QAAQ,GAAG,IAAAC,oBAAa,EAAC,IAAAC,oBAAY,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;EACpD,IAAIC,UAAU,GAAGC,aAAa,CAACN,UAAU,GAAGE,QAAQ,EAAE,EAAE,CAAC;EAEzD,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1BR,MAAM,IAAIpB,SAAS,CAAC0B,UAAU,CAAC;EACjC;EAEA,OAAON,MAAM;AACf"}