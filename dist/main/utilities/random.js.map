{"version":3,"file":"random.js","names":["randomize","items","isArray","typeErrorException","Math","floor","random","length","randomInteger","a","Number","MAX_SAFE_INTEGER","min","arguments","max","isNumber","maxValueException","randomString","len","getType","result","_alphabets","alphabets","_numbers","arrayToString","arrayNumbers","characters","stringToArray","i"],"sources":["../../../src/utilities/random.js"],"sourcesContent":["import { alphabets } from \"./string.js\";\nimport { arrayToString } from \"./array.js\";\nimport { arrayNumbers } from \"./number.js\";\nimport { getType, isArray, isNumber } from \"./dataType.js\";\nimport { typeErrorException } from \"./exceptions.js\";\n\n/**\n * @function randomize\n * function to randomize item in the array\n * @param {Array} items - items to randomize\n * @returns {any} random item on items\n */\nexport function randomize(items) {\n  if (!isArray(items)) throw typeErrorException(items, \"array\");\n\n  return items[Math.floor(Math.random() * items.length)];\n}\n\n/**\n * @function randomInteger\n * function to get random integer between min - max value\n * @param {number} min - minimal range of value to be randomize\n * @param {number} max - maximal range of value to be randomize\n * @returns {number} a integer that has been randomize by rules of range\n */\nexport function randomInteger(min = 0, max = 1) {\n  if (!isNumber(min)) throw typeErrorException(min, \"number\");\n  if (!isNumber(max)) throw typeErrorException(max, \"number\");\n  if (max > Number.MAX_SAFE_INTEGER) throw maxValueException(max);\n\n  return Math.floor(Math.random() * max) + min;\n}\n\n/**\n * @function randomString\n * function to get random string with spesific length of string\n * @param {number} len - length of string to be generate\n * @param {string} character - string format to randomize\n * @returns {string} string that has been randomize\n */\nexport function randomString(len = 1) {\n  if (getType(len) !== \"number\") throw typeErrorException(items, \"number\");\n\n  let result = \"\";\n  let _alphabets = alphabets();\n  let _numbers = arrayToString(arrayNumbers(0, 9), \"\");\n  let characters = stringToArray(_alphabets + _numbers, \"\");\n\n  for (let i = 0; i < 1; i++) {\n    result += randomize(characters);\n  }\n\n  return result;\n}\n"],"mappings":"+UAYO,QAAS,CAAAA,SAASA,CAACC,CAAK,CAAE,CAC/B,GAAI,CAAC,GAAAC,iBAAO,EAACD,CAAK,CAAC,CAAE,KAAM,GAAAE,8BAAkB,EAACF,CAAK,CAAE,OAAO,CAAC,CAE7D,MAAO,CAAAA,CAAK,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGL,CAAK,CAACM,MAAM,CAAC,CACvD,CASO,QAAS,CAAAC,aAAaA,CAAA,CAAmB,KAAAC,CAAA,CAGpCC,MAAM,CAACC,gBAAgB,CAHLC,CAAG,GAAAC,SAAA,CAAAN,MAAA,WAAAM,SAAA,IAAAA,SAAA,IAAG,CAAC,CAAEC,CAAG,GAAAD,SAAA,CAAAN,MAAA,WAAAM,SAAA,IAAAA,SAAA,IAAG,CAAC,CAC5C,GAAI,CAAC,GAAAE,kBAAQ,EAACH,CAAG,CAAC,CAAE,KAAM,GAAAT,8BAAkB,EAACS,CAAG,CAAE,QAAQ,CAAC,CAC3D,GAAI,CAAC,GAAAG,kBAAQ,EAACD,CAAG,CAAC,CAAE,KAAM,GAAAX,8BAAkB,EAACW,CAAG,CAAE,QAAQ,CAAC,CAC3D,GAAIA,CAAG,CAAAL,CAA0B,CAAE,KAAM,CAAAO,iBAAiB,CAACF,CAAG,CAAC,CAE/D,MAAO,CAAAV,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGQ,CAAG,CAAC,CAAGF,CAC3C,CASO,QAAS,CAAAK,YAAYA,CAAA,CAAU,IAAT,CAAAC,CAAG,GAAAL,SAAA,CAAAN,MAAA,EAAAM,SAAA,aAAAA,SAAA,IAAG,CAAC,CAClC,GAAqB,QAAQ,GAAzB,GAAAM,iBAAO,EAACD,CAAG,CAAc,CAAE,KAAM,GAAAf,8BAAkB,EAACF,KAAK,CAAE,QAAQ,CAAC,CAOxE,OALI,CAAAmB,CAAM,CAAG,EAAE,CACXC,CAAU,CAAG,GAAAC,iBAAS,EAAC,CAAC,CACxBC,CAAQ,CAAG,GAAAC,oBAAa,EAAC,GAAAC,oBAAY,EAAC,CAAC,CAAE,CAAC,CAAC,CAAE,EAAE,CAAC,CAChDC,CAAU,CAAGC,aAAa,CAACN,CAAU,CAAGE,CAAQ,CAAE,EAAE,CAAC,CAEhDK,CAAC,CAAG,CAAC,CAAM,CAAC,CAALA,CAAK,CAAEA,CAAC,EAAE,CACxBR,CAAM,EAAIpB,SAAS,CAAC0B,CAAU,CAAC,CAGjC,MAAO,CAAAN,CACT"}